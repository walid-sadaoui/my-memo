{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","lastIndexOf","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","shouldRenderUseWatch","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/7.9911fa60.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  if (isPrimitive(object1) && isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues, isWeb),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = (name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    updateWatchedValue,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}