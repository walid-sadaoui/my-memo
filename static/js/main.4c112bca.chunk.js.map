{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","api/index.tsx","AuthContext.tsx","components/molecules/Loading.tsx"],"names":["AuthenticatedApp","React","lazy","UnauthenticatedApp","App","user","useAuth","Suspense","fallback","Loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","RESTMethods","API_URL","process","fetchAPI","route","a","method","GET","body","fetch","headers","Accept","mode","cache","credentials","response","json","responseData","Error","getRequest","getResponseData","postRequest","POST","AuthContext","createContext","undefined","authContext","useContext","AuthProvider","children","useState","setUser","isLoading","setIsLoading","getCurrentUser","currentUserResponse","log","data","signup","newUser","JSON","stringify","login","logInResponse","logout","useEffect","Provider","value","className"],"mappings":"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","file":"static/js/main.4c112bca.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport Loading from \"./components/molecules/Loading\";\n\nconst AuthenticatedApp = React.lazy(() =>\n  import(\"./components/AuthenticatedApp\")\n);\nconst UnauthenticatedApp = React.lazy(() =>\n  import(\"./components/UnauthenticatedApp\")\n);\nconst App: FunctionComponent = () => {\n  const { user } = useAuth();\n\n  return (\n    <React.Suspense fallback={<Loading />}>\n      {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\n    </React.Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AuthProvider } from \"./AuthContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","enum RESTMethods {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\",\n}\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst fetchAPI = async (\n  route: string,\n  method: RESTMethods = RESTMethods.GET,\n  body?: string\n) => {\n  try {\n    const response = await fetch(API_URL + route, {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      mode: \"cors\",\n      cache: \"default\",\n      credentials: \"include\",\n      body: body,\n    });\n    const responseData = await response.json();\n    return responseData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst getRequest = async (route: string) => {\n  try {\n    const getResponseData = await fetchAPI(route, RESTMethods.GET);\n    return getResponseData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst postRequest = async (route: string, body?: string) => {\n  try {\n    const getResponseData = await fetchAPI(route, RESTMethods.POST, body);\n    return getResponseData;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport { getRequest, postRequest };\n","import React from \"react\";\nimport { getRequest, postRequest } from \"./api\";\nimport Loading from \"./components/molecules/Loading\";\nimport { User } from \"./models/User\";\n\ninterface LoginFormValues {\n  email: string;\n  password: string;\n}\n\ninterface SignupFormValues {\n  username: string;\n  email: string;\n  password: string;\n}\n\ntype AuthContextProps = {\n  user: Partial<User> | undefined;\n  logout: () => Promise<void>;\n  login: (newUser: LoginFormValues) => Promise<boolean>;\n  signup: (newUser: SignupFormValues) => Promise<boolean>;\n};\n\nconst AuthContext = React.createContext<AuthContextProps | undefined>(\n  undefined\n);\n\nconst useAuth = () => {\n  const authContext = React.useContext(AuthContext);\n  if (authContext === undefined)\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  return authContext;\n};\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const [user, setUser] = React.useState<Partial<User> | undefined>(undefined);\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n\n  const getCurrentUser = async () => {\n    try {\n      const currentUserResponse = await getRequest(\"/me\");\n      console.log(currentUserResponse);\n      if (currentUserResponse.data) {\n        setUser(currentUserResponse.data.user);\n      }\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n    }\n  };\n\n  const signup = async (newUser: SignupFormValues): Promise<boolean> => {\n    try {\n      const signUpResponse = await postRequest(\n        \"/signup\",\n        JSON.stringify(newUser)\n      );\n      if (signUpResponse.data) {\n        return true;\n      }\n      return false;\n    } catch (error) {\n      throw new Error(`Signup error : ${error}`);\n    }\n  };\n\n  const login = async (newUser: LoginFormValues): Promise<boolean> => {\n    try {\n      const logInResponse = await postRequest(\n        \"/login\",\n        JSON.stringify(newUser)\n      );\n      console.log(logInResponse);\n      if (logInResponse.data) {\n        setUser(logInResponse.data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.log(\"login error \", error);\n      return false;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await postRequest(\"/logout\");\n      setUser(undefined);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    getCurrentUser();\n  }, []);\n\n  if (isLoading) return <Loading />;\n\n  return (\n    <AuthContext.Provider value={{ user, logout, login, signup }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport { AuthProvider, useAuth };\n","import React, { FunctionComponent } from \"react\";\n\nconst Loading: FunctionComponent = () => {\n  return <p className=\"m-auto\">Loading ...</p>;\n};\n\nexport default Loading;\n"],"sourceRoot":""}