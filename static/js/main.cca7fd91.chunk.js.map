{"version":3,"sources":["AuthContext.tsx","components/molecules/Loading.tsx","api/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AuthContext","React","createContext","undefined","useAuth","authContext","useContext","Error","AuthProvider","children","useState","user","setUser","isLoading","setIsLoading","getCurrentUser","a","getRequest","currentUserResponse","console","log","data","login","newUser","postRequest","JSON","stringify","logInResponse","code","logout","useEffect","Provider","value","Loading","RESTMethods","fetchAPI","route","method","GET","body","fetch","process","headers","Accept","mode","cache","credentials","response","json","responseData","getResponseData","POST","AuthenticatedApp","lazy","UnauthenticatedApp","App","Suspense","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAqBMA,EAAcC,IAAMC,mBACxBC,GAGIC,EAAU,WACd,IAAMC,EAAcJ,IAAMK,WAAWN,GACrC,QAAoBG,IAAhBE,EACF,MAAM,IAAIE,MAAM,+CAClB,OAAOF,GAGHG,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBR,IAAMS,cAAoCP,GADnB,mBACxCQ,EADwC,KAClCC,EADkC,OAEbX,IAAMS,UAAkB,GAFX,mBAExCG,EAFwC,KAE7BC,EAF6B,KAIzCC,EAAc,uCAAG,4BAAAC,EAAA,+EAEeC,YAAW,OAF1B,OAEbC,EAFa,OAGnBC,QAAQC,IAAIF,GACRA,EAAoBG,MACtBT,EAAQM,EAAoBG,KAAKV,MAEnCG,GAAa,GAPM,gDASnBA,GAAa,GATM,yDAAH,qDAadQ,EAAK,uCAAG,WAAOC,GAAP,eAAAP,EAAA,+EAEkBQ,YAC1B,SACAC,KAAKC,UAAUH,IAJP,UAEJI,EAFI,OAMVR,QAAQC,IAAIO,GACoB,MAA5BA,EAAcN,KAAKO,KAPb,uBAQRhB,EAAQe,EAAcN,KAAKV,MARnB,mBASD,GATC,iCAWH,GAXG,yCAaVQ,QAAQC,IAAI,eAAZ,MAbU,mBAcH,GAdG,0DAAH,sDAkBLS,EAAM,uCAAG,sBAAAb,EAAA,+EAELQ,YAAY,WAFP,OAGXZ,OAAQT,GAHG,+CAKXgB,QAAQC,IAAR,MALW,wDAAH,qDAaZ,OAJAnB,IAAM6B,WAAU,WACdf,MACC,IAECF,EAAkB,kBAAC,IAAD,MAGpB,kBAACb,EAAY+B,SAAb,CAAsBC,MAAO,CAAErB,OAAMkB,SAAQP,UAC1Cb,K,6BCpFP,oBAMewB,IAJoB,WACjC,OAAO,4C,qGCHJC,E,iCAAAA,K,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,iBAAAA,M,KAQL,IAEMC,EAAQ,uCAAG,WACfC,GADe,iCAAApB,EAAA,6DAEfqB,EAFe,+BAEOH,EAAYI,IAClCC,EAHe,yCAMUC,MARXC,wBAQ2BL,EAAO,CAC5CC,OAAQA,EACRK,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAM,OACNC,MAAO,UACPC,YAAa,UACbP,KAAMA,IAfK,cAMPQ,EANO,gBAiBcA,EAASC,OAjBvB,cAiBPC,EAjBO,yBAkBNA,GAlBM,4FAAH,sDAsBRhC,EAAU,uCAAG,WAAOmB,GAAP,eAAApB,EAAA,+EAEemB,EAASC,EAAOF,EAAYI,KAF3C,cAETY,EAFS,yBAGRA,GAHQ,wFAAH,sDAOV1B,EAAW,uCAAG,WAAOY,EAAeG,GAAtB,eAAAvB,EAAA,+EAEcmB,EAASC,EAAOF,EAAYiB,KAAMZ,GAFhD,cAEVW,EAFU,yBAGTA,GAHS,wFAAH,yD,2JCnCXE,EAAmBnD,IAAMoD,MAAK,kBAClC,6DAEIC,EAAqBrD,IAAMoD,MAAK,kBACpC,6DAYaE,EAVgB,WAAO,IAC5B5C,EAASP,cAATO,KAER,OACE,kBAAC,IAAM6C,SAAP,CAAgBC,SAAU,kBAACxB,EAAA,EAAD,OACvBtB,EAAO,kBAACyC,EAAD,MAAuB,kBAACE,EAAD,QCHjBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.cca7fd91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { getRequest, postRequest } from \"./api\";\r\nimport Loading from \"./components/molecules/Loading\";\r\nimport { User } from \"./models/User\";\r\n\r\ninterface LoginFormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface RegisterFormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ntype AuthContextProps = {\r\n  user: Partial<User> | undefined;\r\n  logout: () => Promise<void>;\r\n  login: (newUser: LoginFormValues) => Promise<boolean>;\r\n};\r\n\r\nconst AuthContext = React.createContext<AuthContextProps | undefined>(\r\n  undefined\r\n);\r\n\r\nconst useAuth = () => {\r\n  const authContext = React.useContext(AuthContext);\r\n  if (authContext === undefined)\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  return authContext;\r\n};\r\n\r\nconst AuthProvider: React.FC = ({ children }) => {\r\n  const [user, setUser] = React.useState<Partial<User> | undefined>(undefined);\r\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\r\n\r\n  const getCurrentUser = async () => {\r\n    try {\r\n      const currentUserResponse = await getRequest(\"/me\");\r\n      console.log(currentUserResponse);\r\n      if (currentUserResponse.data) {\r\n        setUser(currentUserResponse.data.user);\r\n      }\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (newUser: LoginFormValues): Promise<boolean> => {\r\n    try {\r\n      const logInResponse = await postRequest(\r\n        \"/login\",\r\n        JSON.stringify(newUser)\r\n      );\r\n      console.log(logInResponse);\r\n      if (logInResponse.data.code === 200) {\r\n        setUser(logInResponse.data.user);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.log(\"login error \", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = async (): Promise<void> => {\r\n    try {\r\n      await postRequest(\"/logout\");\r\n      setUser(undefined);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getCurrentUser();\r\n  }, []);\r\n\r\n  if (isLoading) return <Loading />;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, logout, login }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthProvider, useAuth };\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nconst Loading: FunctionComponent = () => {\r\n  return <p>Loading ...</p>;\r\n};\r\n\r\nexport default Loading;\r\n","enum RESTMethods {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  PATCH = \"PATCH\",\r\n  DELETE = \"DELETE\",\r\n}\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst fetchAPI = async (\r\n  route: string,\r\n  method: RESTMethods = RESTMethods.GET,\r\n  body?: string\r\n) => {\r\n  try {\r\n    const response = await fetch(API_URL + route, {\r\n      method: method,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n      cache: \"default\",\r\n      credentials: \"include\",\r\n      body: body,\r\n    });\r\n    const responseData = await response.json();\r\n    return responseData;\r\n  } catch (error) {}\r\n};\r\n\r\nconst getRequest = async (route: string) => {\r\n  try {\r\n    const getResponseData = await fetchAPI(route, RESTMethods.GET);\r\n    return getResponseData;\r\n  } catch (error) {}\r\n};\r\n\r\nconst postRequest = async (route: string, body?: string) => {\r\n  try {\r\n    const getResponseData = await fetchAPI(route, RESTMethods.POST, body);\r\n    return getResponseData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport { getRequest, postRequest };\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\nimport Loading from \"./components/molecules/Loading\";\r\n\r\nconst AuthenticatedApp = React.lazy(() =>\r\n  import(\"./components/AuthenticatedApp\")\r\n);\r\nconst UnauthenticatedApp = React.lazy(() =>\r\n  import(\"./components/UnauthenticatedApp\")\r\n);\r\nconst App: FunctionComponent = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <React.Suspense fallback={<Loading />}>\r\n      {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { AuthProvider } from \"./AuthContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AuthProvider>\r\n      <App />\r\n    </AuthProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}